"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_hooks_1 = require("@testing-library/react-hooks");
var useLoadingCallback_1 = require("./useLoadingCallback");
describe("useLoadingCallback", function () {
    it("should set loading state if callback is called but not resolved", function () { return __awaiter(void 0, void 0, void 0, function () {
        var callback, _a, result, waitForNextUpdate, handleCallback;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    callback = function () { return Promise.resolve("foo"); };
                    _a = react_hooks_1.renderHook(function () {
                        return useLoadingCallback_1.useLoadingCallback(callback);
                    }), result = _a.result, waitForNextUpdate = _a.waitForNextUpdate;
                    handleCallback = result.current[0];
                    react_hooks_1.act(function () {
                        handleCallback();
                    });
                    expect(result.current[1]).toBe(true);
                    return [4 /*yield*/, waitForNextUpdate()];
                case 1:
                    _b.sent();
                    expect(result.current[1]).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should return value that provided callback returns", function () { return __awaiter(void 0, void 0, void 0, function () {
        var callback, result, handleCallback;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    callback = function () { return Promise.resolve("foo"); };
                    result = react_hooks_1.renderHook(function () { return useLoadingCallback_1.useLoadingCallback(callback); }).result;
                    handleCallback = result.current[0];
                    return [4 /*yield*/, react_hooks_1.act(function () { return __awaiter(void 0, void 0, void 0, function () {
                            var value;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, handleCallback()];
                                    case 1:
                                        value = _a.sent();
                                        expect(value).toBe("foo");
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should set error state thrown by callback, loading state to false and then throw the error", function () { return __awaiter(void 0, void 0, void 0, function () {
        var callback, result, handleCallback;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    callback = function () { return Promise.reject("bar"); };
                    result = react_hooks_1.renderHook(function () { return useLoadingCallback_1.useLoadingCallback(callback); }).result;
                    handleCallback = result.current[0];
                    return [4 /*yield*/, react_hooks_1.act(function () { return __awaiter(void 0, void 0, void 0, function () {
                            var e_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, handleCallback()];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        e_1 = _a.sent();
                                        expect(e_1).toBe("bar");
                                        return [3 /*break*/, 3];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    expect(result.current[1]).toBe(false);
                    expect(result.current[2]).toBe("bar");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should reset loading state to false and error to undefined", function () { return __awaiter(void 0, void 0, void 0, function () {
        var callback, result, handleCallback;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    callback = function () { return Promise.reject("bar"); };
                    result = react_hooks_1.renderHook(function () { return useLoadingCallback_1.useLoadingCallback(callback); }).result;
                    handleCallback = result.current[0];
                    return [4 /*yield*/, react_hooks_1.act(function () { return __awaiter(void 0, void 0, void 0, function () {
                            var e_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, handleCallback()];
                                    case 1:
                                        _a.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        e_2 = _a.sent();
                                        return [3 /*break*/, 3];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    react_hooks_1.act(function () {
                        result.current[3]();
                    });
                    expect(result.current[2]).toBe(undefined);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=useLoadingCallback.test.js.map